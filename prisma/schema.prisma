// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For credentials provider
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  products Product[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id           String      @id @default(cuid())
  title        String
  description  String      @db.Text
  price        Int
  originalPrice Int?
  buyLink      String?
  category     Category
  brand        String?
  stock        Int         @default(0)
  sku          String?
  weight       String?
  dimensions   String?
  color        String?
  size         String?
  material     String?
  published    Boolean     @default(false)
  featured     Boolean     @default(false)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  userId       String
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  images       ProductImage[]
}

model ProductImage {
  id        String  @id @default(cuid())
  url       String
  alt       String?
  publicId  String? // Cloudinary public_id
  width     Int?
  height    Int?
  format    String?
  bytes     Int?
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

enum UserRole {
  USER
  ADMIN
}

enum Category {
  MENS
  WOMENS
  KIDS
}
